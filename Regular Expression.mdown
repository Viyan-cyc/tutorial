# 什么是正则表达式   
Regular Expression使用单个字符串来描述、匹配一系列符合某个语法规则的字符串  

### [介绍一个比较好用的正则表达式工具](https://regexper.com/) (点击跳转)  
  
##### REGEXP对象  
Javascript通过内置对象RegExp支持正则表达式  
有两种方法实例化RegExp对象:  

1. 字面量  
var reg = /\bis\b/g;  
'This is a cat and she is a girl'.replace(reg,'IS');  
*"This IS a cat and she IS a girl"*  
2. 构造函数  
var reg = new RegExp('\\bis\\b','g');  
'This is a cat and she is a girl'.replace(reg,'IS');  
*"This IS a cat and she IS a girl"*  

#### 修饰符  
1. g:global全文搜索，不添加，搜索到第一个匹配停止  
2. i:ignore case忽略大小写，默认大小写敏感  
3. m:multiple lines多行搜索  
'He is a boy. Is he?'.replace(/\bis\b/g,'yoo');  
*"He yoo a boy. Is he?"*  
'He is a boy. Is he?'.replace(/\bis\b/gi,'yoo');  
*"He yoo a boy. yoo he?"*

#### 元字符  
- 正则表达式由两种基本字符类型组成
     - 原义文本字符
     - 元字符 
- 元字符是在正则表达式中有特殊含义的非字母字符
     -  $ ^ . | \ () {} [] * + ?  

#### 字符类  
可以使用元字符[]来构建一个简单的类  
**类**是指符合某些特征性的对象，一个泛指，而不是特指某个字符  
表达式[abc]把字符a或b或c归为一类，表达式可以匹配这类的字符  
'a1b2c3d4'.replace(/[abc]/g,'X');  
*"X1X2X3d4"*  

#### 字符类取反  
- 使用元字符 ^ 创建 *反向类/负向类* 
- 反向类的意思是不属于某类的内容
- 表达式 [^abc] 表示不是字符a或b或c的内容  
'a1b2c3d4'.replace(/[^abc]/g,'X');  
*"aXbXcXXX"*  

#### 范围类
- 正则表达式还提供了范围类
- 可以使用[a-z]来连接两个字符表示从a到z的任意字符
- 这是个闭区域，也就是包含a和z本身  
'a1b2e3g6z9'.replace(/[a-z]/g,'P');  
*"P1P2P3P6P9"*
- 在[]组成的类内部是可以连写的 [a-zA-Z]  
'A1b2e3g6z9D2H4'.replace(/[a-zA-Z]/g,'P');  
*"P1P2P3P6P9P2P4"*  
'A1-B2-C3'.replace(/[a-zA-Z-]/g,'S');  
*"S1SS2SS3"*  

#### 预定义类  
| 字符 |      等价类     |               含义               |
|:----:|:---------------:|:--------------------------------:|
|   .  |     [^\r\n]     | 除了回车符和换行符之外的所有字符 |
|  \d  |      [0-9]      |             数字字符             |
|  \D  |      [^0-9]     |            非数字字符            |
|  \s  |  [\t\n\x0B\f\r] |              空白符              |
|  \S  | [^\t\n\x0B\f\r] |             非空白符             |
|  \w  |   [a-zA-Z_0-9]  |  单词字符（字母，下划线，数字）  |
|  \W  |  [^a-zA-Z_0-9]  |            非单词字符            |  


匹配一个 *ab+数字+任意字符* 的字符串：  ab\d.  

#### 边界  
'This is a cat and this is a dog'.replace(/\bis\b/g,'yoo');  
*"This yoo a cat and this yoo a dog"*  
'This is a cat and this is a dog'.replace(/\Bis\b/g,'yoo');  
*"Thyoo is a cat and thyoo is a dog"*  

| 字符 |           含义          |
|:----:|:-----------------------:|
|   .  | 以XXX开始（不在[]中时） |
|   $  |        以XXX结束        |
|  \b  |         单词边界        |
|  \B  |        非单词边界       |  

'@123@abc@'.replace(/@./g,'S');      //@+任意字符  
*"S23Sbc@"*  

'@123@abc@'.replace(/^@./g,'S');     //只能以@开始的  
*"S23@abc@"*  

'@123@abc@'.replace(/.@/g,'S');      //任意字符+@  
*"@12SabS"*  

'@123@abc@'.replace(/.@$/g,'S');      //任意字符+@且只能以@结尾  
*"@123@abS"*  

#### 量词  
|  字符 |              含义             |
|:-----:|:-----------------------------:|
|   ?   |  出现0次或1次（最多出现1次）  |
|   +   | 出现一次或多次（至少出现1次） |
|   *   |    出现0次或多次（任意次）    |
|  {n}  |            出现n次            |
| {n,m} |          出现n次到m次         |
|  {n,} |          至少出现n次          |  

最多10次： \d{0,10}  
  
#### 贪婪模式  
'12345678'.replace(/\d{3,6}/g,'S');  
*"S78"* (尽可能多地匹配)  

#### 非贪婪模式  （在量词后面加上问号即可）  
'12345678'.replace(/\d{3,6}?/g,'S');  
*"SS78"* (尽可能少地匹配)  

#### 分组  
使用()可以达到分组的功能，使量词作用于分组  
'a1b2c3d4'.replace(/([a-z]\d){3}/g,'S');  
*"Sd4"*  

#### 或  
'ViyanCycWilliam'.replace(/ViyanCyc|William/g,'X');  
*"XX"*  
'ViyanCyclliamViyanWilliam'.replace(/Viyan(Cyc|Wi)lliam/g,'X');  
*"XX"*  

#### 反向引用  
'2016-08-23'.replace(/(\d{4})-(\d{2})-(\d{2})/g,'$2/$3/$1');  
*"08/23/2016"*  

#### 忽略分组  
不希望捕获某些分组，只需要在分组内加上?:就可以  
(?:Viyan).(cyc)  
“Viyan” --> any character --> [group #1(“cyc”)]  

#### 前瞻  
正则表达式从文本头部向尾部开始解析，文本尾部方向，称为“前”  
**前瞻**就是在正则表达式匹配到规则的时候，向前检查是否符合断言  
符合和不合符特定断言称为肯定/正向匹配和否定/负向匹配  

| 名称     | 正则          |
|----------|---------------|
| 正向前瞻 | exp(?=assert) |
| 负向前瞻 | exp(?!assert) |  

'a1&3'.replace(/\w(?=\d)/g,'X');  
*"X1&3"*  
'a1&36s9'.replace(/\w(?=\d)/g,'X');  
*"X1&X6X9"*  
'a1&36ss'.replace(/\w(?=\d)/g,'X');  
*"X1&X6ss"*  
'a1&36ss'.replace(/\w(?!\d)/g,'X');   
*"aX&3XXX"*  

#### 方法
##### test(str)  
用来测试字符串参数中是否存在匹配正则表达式模式的字符串  
如果存在则返回true，否则返回false  
var reg = /\w/;  
reg.test('a');      //true  
reg.test('$');     //false  

##### exec(str)  
使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反应匹配结果  
如果没有匹配的文本则返回null，否则返回一个结果数组：  

- index 声明匹配文本的第一个字符的位置
- input 存放被检索的字符串string  

##### search(str)  
search()方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串  
方法返回第一个匹配结果index，查找不到返回-1  
search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索  
'a2b1c3d4'.search('1');  
*3*  
'a2b1c3d4'.search(1);  
*3*  
'a2b1c3d4'.search(/1/);  
*3*  